#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 26 10:29:40 2020

@author: verwirrt
"""

import pandas as pd;
import numpy as np;
from os import path;
from netCDF4 import Dataset;
from string import Template;
import datetime;
import scipy.stats;

import osoda_global_settings;

def get_reef_name(reefID, reefbaseData):
    reefRow = reefbaseData[reefbaseData["ID"] == reefID].iloc[0]
    return reefRow["REEF_NAME"], reefRow["LON"], reefRow["LAT"];
    

#This reads the reef summary data and determines the most vulnerable 25th percentile (smallest natural variation in carbonate parameters)
#These are written to a vulnerable reefs CSV file
#Plots showing mean and eoefficient of variation for different carbonate parameters are made
#example time series are produces for DIC
def extract_vulnerable_reefs(indivReefDataTemplate, reefSummaryPathTemplate, vulnerableReefsOutputPath):
    settings = osoda_global_settings.get_default_settings();
    plotPath = path.dirname(vulnerableReefsOutputPath); #save plots to the same directory as the vulnerable reefs list
    
    #Plotting parameters
    fontsize = 12;
    figsizex = 9.0;
    figsizey = 2.0*6;
    figsize = (figsizex, figsizey);
    
    #load reefbase data
    reefbaseData = pd.read_csv(settings["reefLocationsDataPath"], sep=",", encoding="ISO-8859-1");

    #Read DIC summary metrics and plot the mean, range and uncertainties for all reefs
    #ordered by range
    import numpy as np;
    reefMetrics = pd.read_csv(reefSummaryPathTemplate.safe_substitute(SUMMARYVAR="BOTH"));
    reefMetrics = reefMetrics[np.isfinite(reefMetrics["nt"])]; #remove rows with no data
    
    #calculate vulnerability scale
    #vulnerability is the sum of the rank in coefficient of variance for each carbonate parameter
    paramNames = ["DIC_pred", "AT_pred", "DIC_pH", "AT_pH", "DIC_CO3", "AT_CO3", "DIC_OmegaAragonite", "AT_OmegaAragonite", "DIC_HCO3", "AT_HCO3"];
    scores = [0.0]*len(reefMetrics);
    for paramName in paramNames:
        nanLocs = np.isfinite(reefMetrics[paramName+"_coefficient_of_variation"]) == False;
        rank = scipy.stats.mstats.rankdata(np.ma.masked_invalid(reefMetrics[paramName+"_coefficient_of_variation"])); #ranks masked/nan values as '0'
        
        #replace anywhere that has nan with the mean rank (excluding the nan values)
        meanOfFinite = np.mean(rank[nanLocs==False]);
        rank[nanLocs] = meanOfFinite;
        
        #Inverse the rank (so it's highest variation = low rank, lowest variation = high rank)
        rank = len(reefMetrics[paramName+"_coefficient_of_variation"]) - rank;
        
        if paramName not in ["DIC_pred", "AT_pred"]: #half the value, because it is being ranked for the DIC and AT versions
            scores += 0.5*rank;
        else: #it is either AT_pred or "DIC_pred", so no need to half the value
            scores += rank;
    reefMetrics["vulnerability_score"] = scores;
    
    
    #sore by vulnerability
    reefMetrics = reefMetrics.sort_values(by="vulnerability_score", ascending=True);
    
    #select vulnerable reefs in the lower quartile (bottom 25%) when ranked by coefficient of variation
    vulnerableThresholdIndex = int(np.round(len(reefMetrics)*(1.0-0.25))); #already in reverse range order
    vulnerableReefs = reefMetrics.iloc[vulnerableThresholdIndex:];
    vulnerableReefs.to_csv(vulnerableReefsOutputPath, sep=",", index=False);
    
    
    ########Plotting
    import matplotlib.pyplot as plt;
    midgrey = (0.4, 0.4, 0.4);
    alpha = 0.6;
    size = 3; #scatter point size
    #x = reefMetrics["vulnerability_score"];
    x = np.arange(0, len(reefMetrics));
    
    plt.figure(figsize=figsize);
    
    #vulnerability score
    ax1 = plt.subplot(6,1,1);
    ax1.scatter(x, reefMetrics["vulnerability_score"], c='k', s=size);
    ax1.set_ylabel("Vulnerability\nscore", fontsize=fontsize);
    plt.plot([vulnerableThresholdIndex, vulnerableThresholdIndex], [ax1.get_ylim()[0], ax1.get_ylim()[1]], 'r:', linewidth=2);
    
    #dic
    ax21 = plt.subplot(6,1,2);
    ax21.scatter(x, reefMetrics["DIC_pred_coefficient_of_variation"], c='k', s=size);
    ax21.set_ylabel("CT CoV\n$(\mu mol kg^{-1})$", fontsize=fontsize);
    plt.plot([vulnerableThresholdIndex, vulnerableThresholdIndex], [ax21.get_ylim()[0], ax21.get_ylim()[1]], 'r:', linewidth=2);
    ax22 = ax21.twinx();
    ax22.errorbar(x, reefMetrics["DIC_pred_mean"], yerr=reefMetrics["DIC_pred_mean_uncertainty"], ls="none", alpha=alpha);
    ax22.scatter(x, reefMetrics["DIC_pred_mean"], c=midgrey, s=size);
    ax22.set_ylabel("CT mean\n$(\mu mol kg^{-1})$", fontsize=fontsize, color=midgrey);
    
    #at
    ax31 = plt.subplot(6,1,3);
    ax31.scatter(x, reefMetrics["AT_pred_coefficient_of_variation"], c='k', s=size);
    ax31.set_ylabel("AT CoV\n$(\mu mol kg^{-1})$", fontsize=fontsize);
    plt.plot([vulnerableThresholdIndex, vulnerableThresholdIndex], [ax31.get_ylim()[0], ax31.get_ylim()[1]], 'r:', linewidth=2);
    ax32 = ax31.twinx();
    ax32.errorbar(x, reefMetrics["AT_pred_mean"], yerr=reefMetrics["AT_pred_mean_uncertainty"], ls="none", alpha=alpha);
    ax32.scatter(x, reefMetrics["AT_pred_mean"], c=midgrey, s=size);
    ax32.set_ylabel("AT mean\n$(\mu mol kg^{-1})$", fontsize=fontsize, color=midgrey);
    
    
    #pH
    ax41 = plt.subplot(6,1,4);
    ax41.scatter(x, reefMetrics["DIC_pH_coefficient_of_variation"], c='k', s=size);
    #ax41.scatter(x, reefMetrics["AT_pH_coefficient_of_variation"], c='b');
    ax41.set_ylabel("pH CoV", fontsize=fontsize);
    plt.plot([vulnerableThresholdIndex, vulnerableThresholdIndex], [ax41.get_ylim()[0], ax41.get_ylim()[1]], 'r:', linewidth=2);
    ax42 = ax41.twinx();
    #ax42.errorbar(x, reefMetrics["DIC_pH_mean"], yerr=reefMetrics["DIC_pH_mean_uncertainty"], ls="none", alpha=alpha, c="r");
    #ax42.errorbar(x, reefMetrics["AT_pH_mean"], yerr=reefMetrics["AT_pH_mean_uncertainty"], ls="none", alpha=alpha, c="b");
    ax42.scatter(x, reefMetrics["DIC_pH_mean"], c=midgrey, s=size);
    ax42.errorbar(x, reefMetrics["DIC_pH_mean"], yerr=reefMetrics["DIC_pH_mean_uncertainty"], ls="none", alpha=alpha);
    #ax42.scatter(x, reefMetrics["AT_pH_mean"], c='b');
    ax42.set_ylabel("pH mean", fontsize=fontsize, color=midgrey);
    
    
    #CO3
    ax51 = plt.subplot(6,1,5);
    ax51.scatter(x, reefMetrics["DIC_CO3_coefficient_of_variation"], c='k', s=size);
    #ax51.scatter(x, reefMetrics["AT_CO3_coefficient_of_variation"], c='b');
    ax51.set_ylabel("CO3 CoV\n$(\mu mol kg^{-1})$", fontsize=fontsize);
    plt.plot([vulnerableThresholdIndex, vulnerableThresholdIndex], [ax51.get_ylim()[0], ax51.get_ylim()[1]], 'r:', linewidth=2);
    ax52 = ax51.twinx();
    #ax52.errorbar(x, reefMetrics["DIC_CO3_mean"], yerr=reefMetrics["DIC_CO3_mean_uncertainty"], ls="none", alpha=alpha, c="r");
    #ax52.errorbar(x, reefMetrics["AT_CO3_mean"], yerr=reefMetrics["AT_CO3_mean_uncertainty"], ls="none", alpha=alpha, c="b");
    ax52.scatter(x, reefMetrics["DIC_CO3_mean"], c=midgrey, s=size);
    ax52.errorbar(x, reefMetrics["DIC_CO3_mean"], yerr=reefMetrics["DIC_CO3_mean_uncertainty"], ls="none", alpha=alpha);
    #ax52.scatter(x, reefMetrics["AT_CO3_mean"], c='b');
    ax52.set_ylabel("CO3 mean\n$(\mu mol kg^{-1})$", fontsize=fontsize, color=midgrey);
    
    #aragonite saturation state
    ax61 = plt.subplot(6,1,6);
    ax61.scatter(x, reefMetrics["DIC_OmegaAragonite_coefficient_of_variation"], c='k', s=size);
    #ax61.scatter(x, reefMetrics["AT_OmegaAragonite_coefficient_of_variation"], c='b');
    ax61.set_ylabel("CoV Aragonite\nsaturation state", fontsize=fontsize);
    plt.plot([vulnerableThresholdIndex, vulnerableThresholdIndex], [ax61.get_ylim()[0], ax61.get_ylim()[1]], 'r:', linewidth=2);
    ax62 = ax61.twinx();
    #ax62.errorbar(x, reefMetrics["DIC_OmegaAragonite_mean"], yerr=reefMetrics["DIC_OmegaAragonite_mean_uncertainty"], ls="none", alpha=alpha, c="r");
    #ax62.errorbar(x, reefMetrics["AT_OmegaAragonite_mean"], yerr=reefMetrics["AT_OmegaAragonite_mean_uncertainty"], ls="none", alpha=alpha, c="b");
    ax62.scatter(x, reefMetrics["DIC_OmegaAragonite_mean"], c=midgrey, s=size);
    ax62.errorbar(x, reefMetrics["DIC_OmegaAragonite_mean"], yerr=reefMetrics["DIC_OmegaAragonite_mean_uncertainty"], ls="none", alpha=alpha);
    #ax62.scatter(x, reefMetrics["AT_OmegaAragonite_mean"], c='b');
    ax62.set_ylabel("Mean Aragonite\nsaturation state", fontsize=fontsize, color=midgrey);
    ax61.set_xlabel("Reef vulnerability ranking", fontsize=fontsize);
    
    plt.savefig(path.join(plotPath, "ordered_vulnerability_carbonate_reefs.png"));
    plt.savefig(path.join(plotPath, "ordered_vulnerability_carbonate_reefs.pdf"));
    












